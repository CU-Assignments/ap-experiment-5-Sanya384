(1) Merge Sorted Array
public class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = m - 1; // pointer for the last element of the initial part of nums1
        int j = n - 1; // pointer for the last element of nums2
        int k = m + n - 1; // pointer for the last element of nums1 (the result array)
        
        // Merge nums1 and nums2 from the end
        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[k--] = nums1[i--]; // Place the larger element in the correct position
            } else {
                nums1[k--] = nums2[j--];
            }
        }
        
        // If there are any remaining elements in nums2, copy them
        while (j >= 0) {
            nums1[k--] = nums2[j--];
        }
        
        // No need to copy the remaining elements in nums1 because they are already in the correct place
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Example 1
        int[] nums1_1 = {1, 2, 3, 0, 0, 0};
        int m1 = 3;
        int[] nums2_1 = {2, 5, 6};
        int n1 = 3;
        solution.merge(nums1_1, m1, nums2_1, n1);
        System.out.println(java.util.Arrays.toString(nums1_1));  // Output: [1, 2, 2, 3, 5, 6]
        
        // Example 2
        int[] nums1_2 = {1};
        int m2 = 1;
        int[] nums2_2 = {};
        int n2 = 0;
        solution.merge(nums1_2, m2, nums2_2, n2);
        System.out.println(java.util.Arrays.toString(nums1_2));  // Output: [1]
        
        // Example 3
        int[] nums1_3 = {0};
        int m3 = 0;
        int[] nums2_3 = {1};
        int n3 = 1;
        solution.merge(nums1_3, m3, nums2_3, n3);
        System.out.println(java.util.Arrays.toString(nums1_3));  // Output: [1]
    }
}
(2) First Bad Version
public class Solution {
    
    // Assuming this is the API provided
    boolean isBadVersion(int version) {
        // The API is given and returns whether the version is bad.
        return true;  // Just a placeholder
    }
    
    public int firstBadVersion(int n) {
        int left = 1, right = n;
        
        while (left < right) {
            int mid = left + (right - left) / 2; // To prevent overflow
            
            if (isBadVersion(mid)) {
                right = mid; // The first bad version is at mid or before it
            } else {
                left = mid + 1; // The first bad version is after mid
            }
        }
        
        // When left == right, it means we have found the first bad version
        return left;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example 1
        int n1 = 5;
        // We assume isBadVersion API will return true for versions >= 4
        System.out.println(solution.firstBadVersion(n1)); // Output: 4

        // Example 2
        int n2 = 1;
        // We assume isBadVersion API will return true for version 1
        System.out.println(solution.firstBadVersion(n2)); // Output: 1
    }
}
(3) Sort Colors
public class Solution {
    public void sortColors(int[] nums) {
        int low = 0, mid = 0, high = nums.length - 1;
        
        while (mid <= high) {
            if (nums[mid] == 0) {
                // Swap nums[low] and nums[mid], move both pointers forward
                swap(nums, low, mid);
                low++;
                mid++;
            } else if (nums[mid] == 1) {
                // Just move the mid pointer forward
                mid++;
            } else {
                // Swap nums[mid] and nums[high], move the high pointer backward
                swap(nums, mid, high);
                high--;
            }
        }
    }

    // Helper function to swap elements in the array
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example 1
        int[] nums1 = {2, 0, 2, 1, 1, 0};
        solution.sortColors(nums1);
        System.out.println(java.util.Arrays.toString(nums1)); // Output: [0, 0, 1, 1, 2, 2]

        // Example 2
        int[] nums2 = {2, 0, 1};
        solution.sortColors(nums2);
        System.out.println(java.util.Arrays.toString(nums2)); // Output: [0, 1, 2]
    }
}
(4) Top K Frequent Elements
import java.util.*;

public class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        // Step 1: Build a frequency map
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }
        
        // Step 2: Use a PriorityQueue (min-heap) to store the k most frequent elements
        // The priority queue will store elements based on their frequency.
        // The comparator is defined to order the elements by frequency (ascending order).
        PriorityQueue<Map.Entry<Integer, Integer>> minHeap = 
            new PriorityQueue<>((a, b) -> a.getValue() - b.getValue());
        
        // Step 3: Add elements to the min-heap
        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            minHeap.offer(entry);
            // If the heap size exceeds k, remove the element with the smallest frequency
            if (minHeap.size() > k) {
                minHeap.poll();
            }
        }
        
        // Step 4: Extract the k most frequent elements
        int[] result = new int[k];
        int index = 0;
        while (!minHeap.isEmpty()) {
            result[index++] = minHeap.poll().getKey();
        }
        
        return result;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example 1
        int[] nums1 = {1, 1, 1, 2, 2, 3};
        int k1 = 2;
        System.out.println(Arrays.toString(solution.topKFrequent(nums1, k1))); // Output: [1, 2]

        // Example 2
        int[] nums2 = {1};
        int k2 = 1;
        System.out.println(Arrays.toString(solution.topKFrequent(nums2, k2))); // Output: [1]
    }
}
(5) Find Peak Element
public class Solution {
    public int findPeakElement(int[] nums) {
        int low = 0, high = nums.length - 1;
        
        while (low < high) {
            int mid = low + (high - low) / 2;
            
            // Compare mid element with its right neighbor
            if (nums[mid] < nums[mid + 1]) {
                low = mid + 1;  // Peak must be on the right side
            } else {
                high = mid;  // Peak could be at mid or on the left side
            }
        }
        
        // At the end of the while loop, low == high and pointing to the peak element
        return low;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example 1
        int[] nums1 = {1, 2, 3, 1};
        System.out.println(solution.findPeakElement(nums1));  // Output: 2 (index of peak element 3)

        // Example 2
        int[] nums2 = {1, 2, 1, 3, 5, 6, 4};
        System.out.println(solution.findPeakElement(nums2));  // Output: 5 (index of peak element 6)
    }
}
